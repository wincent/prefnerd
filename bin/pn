#!/usr/bin/env ruby

require 'open3'
require 'tempfile'

PREFERENCES = File.join(ENV['HOME'], 'Library', 'Preferences')
PLISTS = File.join(PREFERENCES, '**', '*.plist')

DOMAINS = Hash.new do |_, key|
  key == '.GlobalPreferences' ? 'NSGlobalDomain' : key
end

%w[defaults diff fswatch system_profiler].each do |dependency|
  if `which #{dependency}`.length.zero?
    puts "Missing dependency: #{dependency}"
    exit 1
  end
end

# Try to get current host UUID.
match = File.
  popen(%w[system_profiler SPHardwareDataType]).
  read.
  match(/^\s*Hardware UUID:\s*(.+)$/)
CURRENT_HOST_SUFFIX = '.' + (match && match[1]).to_s + '.plist'
CURRENT_HOST_PREFIX = '-currentHost '

def read(plist)
  # Swallow stderr; it's usually harmless.
  if plist.start_with?(CURRENT_HOST_PREFIX)
    stdout, stderr, status = Open3.capture3(
      'defaults', '-currentHost', 'read', plist[CURRENT_HOST_PREFIX.length..-1]
    )
  else
    stdout, stderr, status = Open3.capture3('defaults', 'read', plist)
  end
  stdout
end

def debug(string)
  if ENV['DEBUG']
    puts "DEBUG: #{string}"
  end
end

def normalize(plist)
  plist = plist.chomp
  if plist !~ /\.plist\z/
    nil
  elsif plist == File.join(PREFERENCES, File.basename(plist))
    # File is an immediate child of ~/Library/Preferences; return it sans the
    # ".plist" extension.
    DOMAINS[File.basename(plist, '.plist')]
  elsif plist == File.join(PREFERENCES, 'ByHost', File.basename(plist)) &&
    plist.end_with?(CURRENT_HOST_SUFFIX)
    # File is in ~/Library/Preferences/ByHost and matches the UUID of the
    # current host.
    CURRENT_HOST_PREFIX + DOMAINS[File.basename(plist).chomp(CURRENT_HOST_SUFFIX)]
  else
    plist
  end
end

begin
  # Build up map of known defaults
  print 'Reading defaults: '
  DEFAULTS = {}
  Dir.glob(PLISTS, File::FNM_DOTMATCH).each do |plist|
    plist = normalize(plist)
    print '.'
    DEFAULTS[plist] = read(plist) if plist
  end
  puts

  # Start monitoring
  puts 'Monitoring for changes... [hit CTRL-C to exit]'
  lines = File.popen([
    'fswatch',
    '-m',
    'fsevents_monitor',
    '-r',
    PREFERENCES,
  ])
  while line = lines.readline
    debug("fswatch -> #{line.inspect}")
    plist = normalize(line)
    debug("normalized -> #{plist.inspect}")
    if plist
      new_contents = read(plist)
      new_file = Tempfile.new('pn')
      new_file.write(new_contents)
      new_file.close

      old_contents = DEFAULTS[plist] || ''
      old_file = Tempfile.new('pn')
      old_file.write(old_contents)
      old_file.close

      DEFAULTS[plist] = new_contents

      # Output diff from before to after, but strip meaningless filename header
      puts plist + ':'
      puts(File.popen(['diff', '-u', old_file.path, new_file.path]).readlines[2..-1])

      new_file.unlink
      old_file.unlink
    end
  end
rescue Interrupt
end
